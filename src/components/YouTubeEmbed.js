'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\n\nexport default function YouTubeEmbed({ \n  videoId, \n  title = 'YouTube Video', \n  startTime = 0, \n  autoplay = false, \n  className = '',\n  showTitle = true \n}) {\n  const [isLoading, setIsLoading] = useState(true)\n  const [hasError, setHasError] = useState(false)\n\n  // Extract video ID from URL if full URL is provided\n  const extractVideoId = (input) => {\n    if (!input) return ''\n    \n    // If it's already a video ID (11 characters)\n    if (input.length === 11 && !input.includes('/')) {\n      return input\n    }\n    \n    // Extract from various YouTube URL formats\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n      /youtube\\.com\\/v\\/([^&\\n?#]+)/\n    ]\n    \n    for (const pattern of patterns) {\n      const match = input.match(pattern)\n      if (match) return match[1]\n    }\n    \n    return input // Return as-is if no pattern matches\n  }\n\n  const finalVideoId = extractVideoId(videoId)\n  \n  if (!finalVideoId) {\n    return (\n      <Card className=\"bg-slate-800/50 border-slate-700\">\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-red-400\">Invalid YouTube video ID or URL</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const embedUrl = `https://www.youtube.com/embed/${finalVideoId}?start=${startTime}&autoplay=${autoplay ? 1 : 0}&controls=1&rel=0&modestbranding=1&showinfo=0`\n\n  const handleLoad = () => {\n    setIsLoading(false)\n  }\n\n  const handleError = () => {\n    setIsLoading(false)\n    setHasError(true)\n  }\n\n  return (\n    <div className={`youtube-embed ${className}`}>\n      {showTitle && (\n        <div className=\"mb-4 text-center\">\n          <h3 className=\"text-2xl font-bold text-white\">{title}</h3>\n        </div>\n      )}\n      \n      <Card className=\"bg-slate-900/50 border-slate-600 overflow-hidden\">\n        <CardContent className=\"p-0\">\n          <div className=\"relative aspect-video bg-slate-900\">\n            {/* Loading State */}\n            {isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"animate-spin w-8 h-8 border-2 border-red-400 border-t-transparent rounded-full mx-auto\"></div>\n                  <p className=\"text-white\">Loading video...</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Error State */}\n            {hasError && (\n              <div className=\"absolute inset-0 flex items-center justify-center z-10 bg-slate-900\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"text-4xl text-red-400\">‚ö†Ô∏è</div>\n                  <p className=\"text-red-400\">Failed to load video</p>\n                  <button \n                    onClick={() => {\n                      setHasError(false)\n                      setIsLoading(true)\n                    }}\n                    className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n                  >\n                    Try Again\n                  </button>\n                </div>\n              </div>\n            )}\n            \n            {/* Video Iframe */}\n            <iframe\n              width=\"100%\"\n              height=\"100%\"\n              src={embedUrl}\n              title={title}\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              allowFullScreen\n              onLoad={handleLoad}\n              onError={handleError}\n              className=\"absolute inset-0 w-full h-full\"\n              loading=\"lazy\"\n            />\n            \n            {/* Overlay for additional styling */}\n            <div className=\"absolute inset-0 pointer-events-none border-2 border-slate-600 rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Video Info */}\n      <div className=\"mt-4 text-center text-sm text-gray-400\">\n        <p>üé¨ Official Human Expenditure Program Trailer</p>\n        <p>Experience the psychological horror that awaits Harvey</p>\n      </div>\n    </div>\n  )\n}\n\n// Pre-configured component for the specific game trailer\nexport function HumanExpenditureProgramTrailer({ className = '', showTitle = true }) {\n  return (\n    <YouTubeEmbed\n      videoId=\"_qKONc2bIto\"\n      title=\"Human Expenditure Program - Official Trailer\"\n      startTime={321}\n      className={className}\n      showTitle={showTitle}\n    />\n  )\n}\n\n// Component for embedding any SHROOMYCHRIST game video\nexport function ShroomyChristVideoEmbed({ videoUrl, title, className = '' }) {\n  return (\n    <YouTubeEmbed\n      videoId={videoUrl}\n      title={title}\n      className={className}\n      showTitle={true}\n    />\n  )\n}"