'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\n\nexport default function LiveStats({ \n  initialStats = {\n    currentPlayers: 1247,\n    totalPlays: 15683,\n    secretsDiscovered: 8,\n    totalSecrets: 12,\n    endingsUnlocked: 3,\n    totalEndings: 5,\n    averageRating: 4.7\n  },\n  updateInterval = 10000,\n  animate = true \n}) {\n  const [stats, setStats] = useState(initialStats)\n  const [isAnimating, setIsAnimating] = useState(false)\n\n  // Simulate live updates\n  useEffect(() => {\n    if (!animate) return\n\n    const interval = setInterval(() => {\n      setIsAnimating(true)\n      \n      setStats(prev => ({\n        ...prev,\n        currentPlayers: Math.max(500, prev.currentPlayers + Math.floor(Math.random() * 6) - 2),\n        totalPlays: prev.totalPlays + Math.floor(Math.random() * 3),\n        // Occasionally discover new secrets or endings\n        ...(Math.random() < 0.1 && prev.secretsDiscovered < prev.totalSecrets && {\n          secretsDiscovered: prev.secretsDiscovered + 1\n        }),\n        ...(Math.random() < 0.05 && prev.endingsUnlocked < prev.totalEndings && {\n          endingsUnlocked: prev.endingsUnlocked + 1\n        })\n      }))\n      \n      setTimeout(() => setIsAnimating(false), 500)\n    }, updateInterval)\n\n    return () => clearInterval(interval)\n  }, [animate, updateInterval])\n\n  const StatCard = ({ icon, value, label, color, progress }) => (\n    <Card className={`bg-slate-800/40 border-slate-700 transition-all duration-300 ${\n      isAnimating ? 'scale-105 shadow-lg' : ''\n    }`}>\n      <CardContent className=\"p-4 text-center\">\n        <div className=\"text-2xl mb-1\">{icon}</div>\n        <div className={`text-2xl sm:text-3xl font-bold mb-1 transition-all duration-500 ${\n          color === 'red' ? 'text-red-400' :\n          color === 'purple' ? 'text-purple-400' :\n          color === 'blue' ? 'text-blue-400' :\n          color === 'green' ? 'text-green-400' :\n          color === 'yellow' ? 'text-yellow-400' :\n          'text-white'\n        } ${isAnimating ? 'pulse-glow' : ''}`}>\n          {typeof value === 'number' ? value.toLocaleString() : value}\n        </div>\n        <div className=\"text-xs sm:text-sm text-gray-400\">{label}</div>\n        \n        {/* Progress bar for stats with totals */}\n        {progress && (\n          <div className=\"mt-2\">\n            <div className=\"w-full bg-slate-700 rounded-full h-1.5\">\n              <div \n                className={`h-1.5 rounded-full transition-all duration-700 ${\n                  color === 'blue' ? 'bg-blue-400' :\n                  color === 'green' ? 'bg-green-400' :\n                  'bg-purple-400'\n                }`}\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n            <div className=\"text-xs text-gray-500 mt-1\">{Math.round(progress)}% Complete</div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 sm:gap-6\">\n      <StatCard\n        icon=\"👥\"\n        value={stats.currentPlayers}\n        label=\"Currently Playing\"\n        color=\"red\"\n      />\n      \n      <StatCard\n        icon=\"🎮\"\n        value={stats.totalPlays}\n        label=\"Total Plays\"\n        color=\"purple\"\n      />\n      \n      <StatCard\n        icon=\"🔍\"\n        value={`${stats.secretsDiscovered}/${stats.totalSecrets}`}\n        label=\"Secrets Found\"\n        color=\"blue\"\n        progress={(stats.secretsDiscovered / stats.totalSecrets) * 100}\n      />\n      \n      <StatCard\n        icon=\"🛤️\"\n        value={`${stats.endingsUnlocked}/${stats.totalEndings}`}\n        label=\"Endings Unlocked\"\n        color=\"green\"\n        progress={(stats.endingsUnlocked / stats.totalEndings) * 100}\n      />\n    </div>\n  )\n}\n\n// Compact version for smaller spaces\nexport function CompactLiveStats({ \n  currentPlayers = 1247, \n  secretsFound = 8, \n  totalSecrets = 12,\n  className = '' \n}) {\n  const [players, setPlayers] = useState(currentPlayers)\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlayers(prev => prev + Math.floor(Math.random() * 3) - 1)\n    }, 8000)\n    return () => clearInterval(interval)\n  }, [])\n\n  return (\n    <div className={`flex items-center justify-center gap-6 text-sm text-gray-400 ${className}`}>\n      <span className=\"flex items-center gap-2\">\n        <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n        {players.toLocaleString()} playing now\n      </span>\n      <span>|</span>\n      <span>{secretsFound}/{totalSecrets} secrets found</span>\n      <span>|</span>\n      <span>~30 min duration</span>\n    </div>\n  )\n}\n\n// Achievement progress component\nexport function AchievementProgress({ achievements = [] }) {\n  return (\n    <div className=\"space-y-4\">\n      <h4 className=\"text-white font-semibold text-lg\">Community Achievements</h4>\n      <div className=\"grid gap-3\">\n        {achievements.map((achievement, index) => (\n          <div key={achievement.id || index} className=\"bg-slate-800/30 p-4 rounded-lg border border-slate-600\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-2xl\">{achievement.icon}</span>\n                <div>\n                  <h5 className=\"text-white font-medium\">{achievement.name}</h5>\n                  <p className=\"text-gray-400 text-sm\">{achievement.description}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                {achievement.unlocked ? (\n                  <span className=\"text-green-400 font-semibold\">✓ Unlocked</span>\n                ) : (\n                  <span className=\"text-yellow-400 font-semibold\">{achievement.progress}</span>\n                )}\n              </div>\n            </div>\n            \n            {!achievement.unlocked && achievement.progress && (\n              <div className=\"mt-3\">\n                <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-yellow-500 to-orange-500 h-2 rounded-full transition-all duration-700\"\n                    style={{ \n                      width: `${(parseInt(achievement.progress.split('/')[0]) / parseInt(achievement.progress.split('/')[1])) * 100}%` \n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}"