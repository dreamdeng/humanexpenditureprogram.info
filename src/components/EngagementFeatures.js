'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\n\n// Mystery teasers that rotate and create intrigue\nexport function MysteryTeasers({ \n  teasers = [\n    \"The simulation knows when you're watching...\",\n    \"Eun-Mi's laptop contains more than business files.\",\n    \"Harvey's memories aren't entirely his own.\",\n    \"The revenue counter hides a darker truth.\",\n    \"Toby's questions have predetermined answers.\",\n    \"The exit button was never meant to work.\",\n    \"Some choices echo across multiple playthroughs.\",\n    \"The real Harvey might still be somewhere else.\"\n  ],\n  rotateInterval = 5000\n}) {\n  const [currentTeaser, setCurrentTeaser] = useState(0)\n  const [isVisible, setIsVisible] = useState(true)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIsVisible(false)\n      setTimeout(() => {\n        setCurrentTeaser((prev) => (prev + 1) % teasers.length)\n        setIsVisible(true)\n      }, 300)\n    }, rotateInterval)\n\n    return () => clearInterval(interval)\n  }, [teasers.length, rotateInterval])\n\n  return (\n    <Card className=\"bg-slate-800/20 border-slate-700 border-dashed hover:border-purple-500/50 transition-all duration-500\">\n      <CardContent className=\"p-6 text-center min-h-[120px] flex items-center justify-center\">\n        <div className={`transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}>\n          <div className=\"text-3xl mb-3\">üîÆ</div>\n          <p className=\"text-gray-300 italic text-lg leading-relaxed\">\n            \"{teasers[currentTeaser]}\"\n          </p>\n          <div className=\"mt-3 flex justify-center space-x-1\">\n            {teasers.map((_, index) => (\n              <div\n                key={index}\n                className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                  index === currentTeaser ? 'bg-purple-400' : 'bg-gray-600'\n                }`}\n              />\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Player testimonials with rotating display\nexport function PlayerTestimonials({ testimonials = [] }) {\n  const [currentPage, setCurrentPage] = useState(0)\n  const testimonialsPerPage = 3\n  const totalPages = Math.ceil(testimonials.length / testimonialsPerPage)\n\n  const nextPage = () => {\n    setCurrentPage((prev) => (prev + 1) % totalPages)\n  }\n\n  const prevPage = () => {\n    setCurrentPage((prev) => (prev - 1 + totalPages) % totalPages)\n  }\n\n  const currentTestimonials = testimonials.slice(\n    currentPage * testimonialsPerPage,\n    (currentPage + 1) * testimonialsPerPage\n  )\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-2xl font-bold text-white\">üí¨ Player Voices</h3>\n        {totalPages > 1 && (\n          <div className=\"flex gap-2\">\n            <Button onClick={prevPage} variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-gray-300\">\n              ‚Üê\n            </Button>\n            <Button onClick={nextPage} variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-gray-300\">\n              ‚Üí\n            </Button>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"grid md:grid-cols-3 gap-4\">\n        {currentTestimonials.map((testimonial, index) => (\n          <Card key={testimonial.id || index} className=\"bg-slate-800/40 border-slate-700 hover:border-gray-500 transition-colors\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <span className=\"text-2xl\">{testimonial.avatar}</span>\n                <div>\n                  <div className=\"font-semibold text-white\">{testimonial.author}</div>\n                  <div className=\"text-yellow-400 text-sm\">\n                    {'‚òÖ'.repeat(testimonial.rating)}{'‚òÜ'.repeat(5 - testimonial.rating)}\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-gray-300 italic leading-relaxed mb-3\">\n                \"{testimonial.text}\"\n              </p>\n              <div className=\"text-xs text-gray-500\">{testimonial.timestamp}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {totalPages > 1 && (\n        <div className=\"flex justify-center space-x-2\">\n          {Array.from({ length: totalPages }, (_, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentPage(index)}\n              className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                index === currentPage ? 'bg-red-400' : 'bg-gray-600'\n              }`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Interactive character quiz\nexport function CharacterQuiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [answers, setAnswers] = useState([])\n  const [showResult, setShowResult] = useState(false)\n  const [result, setResult] = useState(null)\n\n  const questions = [\n    {\n      question: \"How do you handle moral dilemmas?\",\n      options: [\n        { text: \"Follow my emotions\", character: \"Harvey\" },\n        { text: \"Think practically\", character: \"Eun-Mi\" },\n        { text: \"Question everything\", character: \"Toby\" }\n      ]\n    },\n    {\n      question: \"What motivates you most?\",\n      options: [\n        { text: \"Love and connection\", character: \"Harvey\" },\n        { text: \"Security and stability\", character: \"Eun-Mi\" },\n        { text: \"Truth and understanding\", character: \"Toby\" }\n      ]\n    },\n    {\n      question: \"When faced with suffering, you...\",\n      options: [\n        { text: \"Endure it with hope\", character: \"Harvey\" },\n        { text: \"Find ways to profit from it\", character: \"Eun-Mi\" },\n        { text: \"Analyze its purpose\", character: \"Toby\" }\n      ]\n    }\n  ]\n\n  const characterDescriptions = {\n    Harvey: {\n      name: \"Harvey Harvington\",\n      description: \"You're empathetic and vulnerable, often trusting others even when it might not be wise.\",\n      emoji: \"üíî\"\n    },\n    \"Eun-Mi\": {\n      name: \"Eun-Mi\",\n      description: \"You're practical and business-minded, sometimes making difficult choices for the greater good.\",\n      emoji: \"üíº\"\n    },\n    Toby: {\n      name: \"Toby\",\n      description: \"You're analytical and mysterious, always seeking deeper truths behind surface appearances.\",\n      emoji: \"üîç\"\n    }\n  }\n\n  const handleAnswer = (option) => {\n    const newAnswers = [...answers, option.character]\n    setAnswers(newAnswers)\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1)\n    } else {\n      // Calculate result\n      const counts = newAnswers.reduce((acc, character) => {\n        acc[character] = (acc[character] || 0) + 1\n        return acc\n      }, {})\n      \n      const topCharacter = Object.keys(counts).reduce((a, b) => \n        counts[a] > counts[b] ? a : b\n      )\n      \n      setResult(characterDescriptions[topCharacter])\n      setShowResult(true)\n    }\n  }\n\n  const resetQuiz = () => {\n    setCurrentQuestion(0)\n    setAnswers([])\n    setShowResult(false)\n    setResult(null)\n  }\n\n  if (showResult) {\n    return (\n      <Card className=\"bg-gradient-to-br from-purple-900/30 to-pink-900/30 border-purple-500/50\">\n        <CardHeader>\n          <CardTitle className=\"text-white text-2xl text-center\">\n            üé≠ You are most like...\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-6\">\n          <div className=\"text-6xl\">{result.emoji}</div>\n          <h3 className=\"text-3xl font-bold text-white\">{result.name}</h3>\n          <p className=\"text-purple-100 text-lg leading-relaxed max-w-md mx-auto\">\n            {result.description}\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button onClick={resetQuiz} variant=\"outline\" className=\"border-purple-500 text-purple-300\">\n              Take Quiz Again\n            </Button>\n            <Button className=\"bg-red-600 hover:bg-red-700 text-white\">\n              Play the Game\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-slate-800/40 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-white text-xl\">\n          üß† Which Character Are You Most Like?\n        </CardTitle>\n        <CardDescription className=\"text-gray-400\">\n          Question {currentQuestion + 1} of {questions.length}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"w-full bg-slate-700 rounded-full h-2\">\n          <div \n            className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}\n          />\n        </div>\n        \n        <h3 className=\"text-white text-lg font-semibold\">\n          {questions[currentQuestion].question}\n        </h3>\n        \n        <div className=\"space-y-3\">\n          {questions[currentQuestion].options.map((option, index) => (\n            <Button\n              key={index}\n              onClick={() => handleAnswer(option)}\n              variant=\"outline\"\n              className=\"w-full text-left justify-start border-gray-600 text-gray-300 hover:bg-slate-700 hover:border-purple-500\"\n            >\n              {option.text}\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Progress tracking component for secrets and endings\nexport function ProgressTracker({ \n  secretsFound = 8, \n  totalSecrets = 12, \n  endingsUnlocked = 3, \n  totalEndings = 5 \n}) {\n  const secretsProgress = (secretsFound / totalSecrets) * 100\n  const endingsProgress = (endingsUnlocked / totalEndings) * 100\n\n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-2xl font-bold text-white text-center\">üìä Community Progress</h3>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"bg-slate-800/40 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              üîç <span>Secrets Discovered</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center mb-4\">\n              <span className=\"text-4xl font-bold text-blue-400\">{secretsFound}</span>\n              <span className=\"text-2xl text-gray-400\">/{totalSecrets}</span>\n            </div>\n            <div className=\"w-full bg-slate-700 rounded-full h-3 mb-2\">\n              <div \n                className=\"bg-gradient-to-r from-blue-500 to-cyan-500 h-3 rounded-full transition-all duration-700\"\n                style={{ width: `${secretsProgress}%` }}\n              />\n            </div>\n            <p className=\"text-center text-sm text-gray-400\">\n              {Math.round(secretsProgress)}% of Harvey's secrets revealed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/40 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              üõ§Ô∏è <span>Endings Unlocked</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center mb-4\">\n              <span className=\"text-4xl font-bold text-green-400\">{endingsUnlocked}</span>\n              <span className=\"text-2xl text-gray-400\">/{totalEndings}</span>\n            </div>\n            <div className=\"w-full bg-slate-700 rounded-full h-3 mb-2\">\n              <div \n                className=\"bg-gradient-to-r from-green-500 to-emerald-500 h-3 rounded-full transition-all duration-700\"\n                style={{ width: `${endingsProgress}%` }}\n              />\n            </div>\n            <p className=\"text-center text-sm text-gray-400\">\n              {Math.round(endingsProgress)}% of possible endings discovered\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}"